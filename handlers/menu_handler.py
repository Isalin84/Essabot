# menu_handler.py
from aiogram import Router, F  # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton  # –†–∞–±–æ—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.fsm.state import StatesGroup, State  # –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from googletrans import Translator  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
import os
import random
from aiogram.types import FSInputFile  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤

router = Router()  # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
translator = Translator()  # –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
class TranslationState(StatesGroup):
    waiting_for_text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
    keyboard.row(
        KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å H&S Policy"),  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–∏
        KeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å Golden Rules")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è Golden Rules
    )
    keyboard.row(
        KeyboardButton(text="üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ"),  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        KeyboardButton(text="üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    )
    return keyboard


@router.message(F.text == "/menu")
async def show_main_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer("–í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())


@router.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å H&S Policy")
async def send_hs_policy(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ H&S Policy –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    file_path = "docs/H&S_Policy.docx"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    if os.path.exists(file_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        file = FSInputFile(file_path)
        await message.answer_document(file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        await message.answer("–§–∞–π–ª H&S Policy –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ docs.")


@router.message(F.text == "üìú –ü–æ–∫–∞–∑–∞—Ç—å Golden Rules")
async def send_golden_rules(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ Golden Rules."""
    golden_rules = [
        "1) SAM –∏ LOTOTO: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–¥–ª–µ–∂–∞—â—É—é –∏–∑–æ–ª—è—Ü–∏—é –æ–ø–∞—Å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
        "2) –û–ø–∞—Å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–ø–∞—Å–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ä...",
        "3) –†–∞–±–æ—Ç–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ...",
        "4) –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–ª—å–∫–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞—â–∏—Ç...",
        "5) –ù–∞—Ä—è–¥-–¥–æ–ø—É—Å–∫: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º –Ω–∞—Ä—è–¥–æ–º-–¥–æ–ø—É—Å–∫–æ–º...",
        "6) –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Å–æ–±–ª—é–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ..."
    ]
    await message.answer("\n".join(golden_rules))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª


@router.message(F.text == "üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ")
async def send_random_audio(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    assets_path = "Assets"  # –ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
    if not os.path.exists(assets_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        await message.answer("–ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    audio_files = [f for f in os.listdir(assets_path) if f.endswith(".mp3")]  # –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    if not audio_files:  # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
        await message.answer("–í –ø–∞–ø–∫–µ Assets –Ω–µ—Ç –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    random_audio = random.choice(audio_files)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
    file_path = os.path.join(assets_path, random_audio)

    audio = FSInputFile(file_path)
    await message.answer_audio(audio)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª


@router.message(F.text == "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
async def start_translation_mode(message: Message, state: FSMContext):
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:")
    await state.set_state(TranslationState.waiting_for_text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(TranslationState.waiting_for_text)
async def translate_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
    try:
        detected_language = translator.detect(message.text).lang  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        if detected_language == "ru":
            translated_text = translator.translate(message.text, src="ru", dest="en").text
            await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:\n{translated_text}")
        elif detected_language == "en":
            translated_text = translator.translate(message.text, src="en", dest="ru").text
            await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n{translated_text}")
        else:
            await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
    finally:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
